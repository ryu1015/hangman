{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "バングマンへようこそ！\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def hangman(word):\n",
    "    wrong=0\n",
    "    stages=[\"\",\n",
    "          \"____________      \",\n",
    "          \"|                 \",\n",
    "          \"|         |       \",\n",
    "          \"|         o       \",\n",
    "          \"|       / | ¥　　 \",\n",
    "          \"|        /  \\     \",\n",
    "          \"|                 \"\n",
    "          ]\n",
    "    rletters=list(word)\n",
    "    board=[\"_\"]*len(word)\n",
    "    win=False\n",
    "    print(\"バングマンへようこそ！\")\n",
    "    while wrong<len(stages)-1:\n",
    "        print(\"\\n\")\n",
    "        msg=\"1文字を予想してね\"\n",
    "        char=input(msg)\n",
    "        if char in rletters:\n",
    "            cind=rletters.index(char)\n",
    "            board[cind]=char\n",
    "            rletters[cind]='$'\n",
    "        else:\n",
    "            wrong +=1\n",
    "        print(\" \".join(board))\n",
    "        e=wrong+1\n",
    "        print(\"\\n\".join(stages[0:e]))\n",
    "        if \"_\" not in board:\n",
    "            print(\"あなたの勝ち！\")\n",
    "            print(\" \".join(board))\n",
    "            win=True\n",
    "            break\n",
    "    \n",
    "    if not win:\n",
    "        print(\"\\n\".join(stages[0:wrong+1]))\n",
    "        print(\"あなたの負け！正解は{}.\".format(word))\n",
    "        \n",
    "hangman(\"\")"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "import random\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def hangman():\n",
    "\n",
    "    word_list = [\"Python\", \"Java\", \"computer\", \"hacker\", \"painter\"]\n",
    "\n",
    "    random_number = random.randint(0, 4)\n",
    "\n",
    "    word = word_list[random_number]\n",
    "\n",
    "    wrong_guesses = 0\n",
    "\n",
    "    stages = [\"\", \"________      \", \"|      |      \", \"|      0      \", \"|     /|\\     \", \"|     / \\     \", \"|\"]\n",
    "\n",
    "    remaining_letters = list(word)\n",
    "\n",
    "    letter_board = [\"__\"] * len(word)\n",
    "\n",
    "    win = False\n",
    "\n",
    "    print('Welcome to Hangman')\n",
    "\n",
    "    while wrong_guesses < len(stages) - 1:\n",
    "\n",
    "        print('\\n')\n",
    "\n",
    "        guess = input(\"Guess a letter\")\n",
    "\n",
    "        if guess in remaining_letters:\n",
    "\n",
    "            character_index = remaining_letters.index(guess)\n",
    "\n",
    "            letter_board[character_index] = guess\n",
    "\n",
    "            remaining_letters[character_index] = '$'\n",
    "\n",
    "        else:\n",
    "\n",
    "            wrong_guesses += 1\n",
    "\n",
    "        print((' '.join(letter_board)))\n",
    "\n",
    "        print('\\n'.join(stages[0: wrong_guesses + 1]))\n",
    "\n",
    "        if '__' not in letter_board:\n",
    "\n",
    "            print('You win! The word was:')\n",
    "\n",
    "            print(' '.join(letter_board))\n",
    "\n",
    "            win = True\n",
    "\n",
    "            break\n",
    "\n",
    "    if not win:\n",
    "\n",
    "        print('\\n'.join(stages[0: wrong_guesses]))\n",
    "\n",
    "        print('You lose! The words was {}'.format(word))\n",
    "\n",
    "\n",
    "\n",
    "hangman()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
